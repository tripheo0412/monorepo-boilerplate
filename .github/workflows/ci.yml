name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  install-and-build:
    name: Install Dependencies and Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Setup turbo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build types package
        run: pnpm build-type
        
      - name: Build shared libraries
        run: pnpm build-libs
        
      - name: Upload built packages
        uses: actions/upload-artifact@v4
        with:
          name: built-packages
          path: |
            packages/*/dist
          retention-days: 1

  lint:
    name: Lint
    needs: install-and-build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Setup turbo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Download built packages
        uses: actions/download-artifact@v4
        with:
          name: built-packages
          path: packages
          
      - name: Run ESLint
        run: pnpm lint

  type-check:
    name: Type Check
    needs: install-and-build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Setup turbo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Download built packages
        uses: actions/download-artifact@v4
        with:
          name: built-packages
          path: packages
          
      - name: Run TypeScript type checking
        run: pnpm type-check

  format-check:
    name: Format Check
    needs: install-and-build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Setup turbo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Check code formatting
        run: pnpm prettier

  test:
    name: Test
    needs: install-and-build
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Setup turbo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Download built packages
        uses: actions/download-artifact@v4
        with:
          name: built-packages
          path: packages
          
      - name: Setup test environment
        run: |
          cp apps/backend-boilerplate/.env.example apps/backend-boilerplate/.env.test
          echo "DATABASE_NAME=test_db" >> apps/backend-boilerplate/.env.test
          echo "POSTGRES_HOST=localhost" >> apps/backend-boilerplate/.env.test
          echo "POSTGRES_PORT=5432" >> apps/backend-boilerplate/.env.test
          echo "POSTGRES_USER=test" >> apps/backend-boilerplate/.env.test
          echo "POSTGRES_PASSWORD=test" >> apps/backend-boilerplate/.env.test
          echo "REDIS_HOST=localhost" >> apps/backend-boilerplate/.env.test
          echo "REDIS_PORT=6379" >> apps/backend-boilerplate/.env.test
          echo "JWT_SECRET=test-secret-key-for-ci" >> apps/backend-boilerplate/.env.test
          echo "JWT_EXPIRES_IN=7d" >> apps/backend-boilerplate/.env.test
          
      - name: Run backend migrations
        working-directory: apps/backend-boilerplate
        env:
          NODE_ENV: test
        run: pnpm mikro-orm migration:up
        
      - name: Run all tests
        env:
          NODE_ENV: test
        run: pnpm test
        
      - name: Run test coverage
        env:
          NODE_ENV: test
        run: pnpm test:coverage
        
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            apps/*/coverage
            packages/*/coverage
          retention-days: 7

  all-checks-passed:
    name: All Checks Passed
    needs: [lint, type-check, format-check, test]
    runs-on: ubuntu-latest
    
    steps:
      - name: All checks completed successfully
        run: echo "âœ… All CI checks passed!"